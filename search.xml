<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何在阿里云ECS为博客独立部署Waline评论系统</title>
      <link href="/posts/947d9dc4.html"/>
      <url>/posts/947d9dc4.html</url>
      
        <content type="html"><![CDATA[<p>@[TOC]</p><h1 id="什么是waline评论系统"><a href="#什么是waline评论系统" class="headerlink" title="什么是waline评论系统"></a>什么是waline评论系统</h1><p>首先简单解释一下什么是waline评论系统，它是一款简洁、安全轻量级的独立评论系统。可以适配各类博客系统，进行单独评论添加，它的官网如下[waline](<a href="https://waline.js.org/">Waline | Waline</a>)，里面有快速上手教程，教大家如何利用免费的Vercel部署的详细教程，如果你的博客系统也是利用vercel免费服务器部署的，那推荐直接采用官网快速上手的教程。如果你的博客系统和我一样部署在阿里云ECS服务器上，那么我强烈建议独立部署一个waline在已有的ECS服务器上面，不仅可以更好利用现有资源，同时更加安全可靠稳定，大大提高评论响应速度，毕竟免费Vercal不仅性能较差，同时因为国内GFW的关系，部署的评论系统访问并不稳定 ，并且阿里云部署的博客和vercal独立评论系统还有跨域访问的安全隐患。如果你是HEXO搭建的静态博客，那么可以完全按照我的步骤利用阿里云ECS服务器搭建独立waline博客评论系统，让我们直接开始吧。</p><h1 id="部署Waline评论系统步骤"><a href="#部署Waline评论系统步骤" class="headerlink" title="部署Waline评论系统步骤"></a>部署Waline评论系统步骤</h1><p>那么如何在阿里云ECS部署Waline，总体步骤如下：<strong>1.配置数据库，2.部署waline，3.修改访问地址。</strong>只要三步即可部署完成，每一步都会详细配置图文解说，如果你的静态博客就是用HEXO搭建的，哪怕新手小白也可部署成功，如果你的博客系统不是HEXO，那么第三步修改访问地址的方法，需要单独网上查找攻略配置，其他步骤配置是完全通用的，这个教程绝对是全网最详细的针对阿里云ECS服务器部署Waline教程。</p><h2 id="1-配置数据库"><a href="#1-配置数据库" class="headerlink" title="1.配置数据库"></a>1.配置数据库</h2><p>这里建议采用docker配置一个新的数据库，即使你环境已经配置了mysql也不会冲突影响，但是如果你不想配置新的docker容器的mysql，可以直接跳到<a href="###1.3%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E9%A1%B9">1.3初始化数据库表项</a></p><h3 id="1-1配置docker"><a href="#1-1配置docker" class="headerlink" title="1.1配置docker"></a>1.1配置docker</h3><p>配置数据库前，我们先在阿里云ECS服务器(Linux系统)上简单配置一下docker环境，如果你服务器上已经配置docker或者不确定是否配置docker，可以通过命令行查看，当前docker是否配置信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker -v</span><br></pre></td></tr></table></figure><p>如果你已经安装过则会显示类似如下信息，则可以跳过此步骤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@root ~]# sudo docker -v </span><br><span class="line">Docker version 25.0.3, build 4debf41</span><br></pre></td></tr></table></figure><p>如果没有安装docker，按照如下操作即可</p><p>运行如下，下载docker-ce的yum源。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>安装Docker。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure><p>然后也执行一下sudo docker -v查看是否安装成功。</p><p>执行如下命令，启动使能docker，这样你的docker容器就能跟随系统开机自启动。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><p>查看docker是否启动成功，显示<strong>active (running)</strong> 说明正常激活运行中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@root ~]# sudo systemctl status docker</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: **active (running)** since Mon 2024-02-12 14:09:24 CST; 24h ago</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line"> Main PID: 21153 (dockerd)</span><br><span class="line">   Memory: 1.5G</span><br></pre></td></tr></table></figure><p>如果你的ECS系统不是CentOS 7系统，而是其他版本可以参考阿里云官方文档安装指南<a href="https://help.aliyun.com/zh/ecs/use-cases/deploy-and-use-docker-on-alibaba-cloud-linux-2-instances#2afc861105osq">Linux安装Docker并使用</a></p><h3 id="1-2配置docker-Mysql"><a href="#1-2配置docker-Mysql" class="headerlink" title="1.2配置docker-Mysql"></a>1.2配置docker-Mysql</h3><p>在服务器上执行如下命令行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p>这时候就体现docker的好处了，即使你原来环境配置了mysql数据库，通过docker启动新的mysql可以不影响原来数据库，同时可以指定Mysql版本保证配置环境的相同，避免各种不兼容问题。<br>我们通过如下命令行开始创建运行mysql数据库容器，一次性复制该命令行，不要分段执行，全复制上以后回车即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 4036:4306 --name mysql \</span><br><span class="line"> --restart=always \</span><br><span class="line">-e TZ=Asia/Shanghai \</span><br><span class="line">-v /mydocker/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /mydocker/mysql/logs:/var/log/mysql \</span><br><span class="line">-v /mydocker/mysql/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-d mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><p>具体参数说明如下:<br>-p 4306:4306：将主机的4306端口映射到docker容器的4306端口，为了避免和mysql常用端口3306冲突，我建议使用4406，也可以按照你需求，采用其他未占用端口启动即可。<br>–name mysql：设置docker容器的名称，这里设置的容器名称是mysql，你也可以修改为其它，这个容器名称需要记得，进入容器用的到容器名称<br>–restart&#x3D;always：设置自启；<br>-e TZ&#x3D;Asia&#x2F;Shanghai：更改时区<br>-e MYSQL_ROOT_PASSWORD&#x3D;123456：这里123456为你要设置的root用户密码，请记住这个密码，到时候登录mysql会有用，如果没有修改，那密码就是现在配置的123456，mysql密码可以修改更新，所以当下使用配置123456也不会影响。<br>-d mysql:5.7 : 运行的mysql版本信息<br>–character-set-server&#x3D;utf8mb4 ：设置Mysql字符集<br>–collation-server&#x3D;utf8mb4_unicode_ci：设置Mysql校对集<br>-v &#x2F;mydocker&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d \ -v &#x2F;mydocker&#x2F;mysql&#x2F;logs:&#x2F;var&#x2F;log&#x2F;mysql \ -v &#x2F;mydocker&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql \：<br>挂载相应的目录，格式为-v 主机目录:容器内目录</p><p>如果没有提示错误，那就配置成功，我们可以通过命令查看当前mysql容器信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>正常配置成功，显示应该类似这样，name就是我们配置的容器名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@root vhosts]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE              COMMAND                  CREATED        STATUS        PORTS                                         NAMES</span><br><span class="line">608effc0382b   mysql:5.7          &quot;docker-entrypoint.s…&quot;   26 hours ago   Up 19 hours   3306/tcp, 33060/tcp, 0.0.0.0:4306-&gt;4306/tcp   mysql</span><br></pre></td></tr></table></figure><p>我们可以通过容器名称（mysql）或者容器ID（608effc0382b）配置如下命令进入Mysql容器，效果是一样的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it 608effc0382b /bin/bash</span><br></pre></td></tr></table></figure><p>我们暂时不需要进入mysql容器，我们现在先需要查看一下docker-mysql的实际环回地址，执行如下命令，我们可以看到172.17.0.2，这个地址到时候登录配置我们会用的到，记住这个地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@root config]# docker exec -it mysql cat /etc/hosts</span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">ff00::0 ip6-mcastprefix</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br><span class="line">172.17.0.2      608effc0382b</span><br></pre></td></tr></table></figure><h3 id="1-3初始化数据库表项"><a href="#1-3初始化数据库表项" class="headerlink" title="1.3初始化数据库表项"></a>1.3初始化数据库表项</h3><p>我们通过Navicat数据库管理工具连接服务器的mysql，执行waline官网下载好的sql数据库的任务就完成了</p><p>这里单独说明一下数据库版本要在5.5.3 以上才支持utf8mb4字符编码，如果你不是采用教程docker启动的mysql版本，执行sql语句会有问题。</p><h4 id="1-3-1下载运行的sql语句"><a href="#1-3-1下载运行的sql语句" class="headerlink" title="1.3.1下载运行的sql语句"></a>1.3.1下载运行的sql语句</h4><p>直接连接点进去下载或者下面的sql复制保存为.sql类型的文件都行</p><p> waline项目github的sql地址 <a href="https://github.com/walinejs/waline/blob/main/assets/waline.sql">walien官方sql</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> wl_Comment</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `wl_Comment` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `comment` text,</span><br><span class="line">  `insertedAt` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `ip` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `link` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `mail` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nick` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `pid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `rid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sticky` <span class="type">boolean</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `status` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `<span class="keyword">like</span>` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ua` text,</span><br><span class="line">  `url` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `createdAt` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `updatedAt` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> wl_Counter</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `wl_Counter` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `<span class="type">time</span>` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `reaction0` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `reaction1` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `reaction2` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `reaction3` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `reaction4` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `reaction5` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `reaction6` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `reaction7` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `reaction8` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `url` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `createdAt` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `updatedAt` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump <span class="keyword">of</span> <span class="keyword">table</span> wl_Users</span><br><span class="line"># <span class="comment">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `wl_Users` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `display_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `label` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `url` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `avatar` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `github` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `twitter` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `facebook` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `google` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `weibo` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `qq` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `<span class="number">2</span>fa` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `createdAt` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `updatedAt` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */</span>;</span><br></pre></td></tr></table></figure><h4 id="1-3-2连接数据库"><a href="#1-3-2连接数据库" class="headerlink" title="1.3.2连接数据库"></a>1.3.2连接数据库</h4><p>如果你没有按照和连接过mysql数据库，没关系这里带你安装下载连接数据库。</p><p>首先下载Navicat可视化数据库管理工具，破解版安装配置教程参考如下链接，[Navicat16破解](<a href="https://www.cnblogs.com/kkdaj/p/16260681.html">Navicat Premium 16 永久破解激活 - 酷酷的洛克 - 博客园 (cnblogs.com)</a>)</p><p>下载安装完毕以后，左上角选择[文件]-&gt;[新建连接]-&gt;[mysql]</p><p><img src="/img/4.png" data-original="http://nofreesytle.top/connect.png" alt="连接数据库"></p><p>连接界面选择SSH，先连接阿里云ECS，然后选择常规在连接数据库，具体操作详情，查看如下</p><p><img src="/img/4.png" data-original="http://nofreesytle.top/ssh.png" alt="配置SSH"></p><p>配置完SSH不要关闭界面，选择常规 ，继续配置mysql连接信息</p><p><img src="/img/4.png" data-original="http://nofreesytle.top/commom.png" alt="配置常规"></p><p>然后点击确定，双击就可以看到数据库下面的表项</p><p><img src="/img/4.png" data-original="http://nofreesytle.top/success.png" alt="连接成功"></p><p>新建一个数据库，数据库名就叫waline，选择utf8m64，排序规则选择utf8m64_general_ci，</p><p>新建数据库完成然后点击运行sql，把原来下载保存好的.sql文件导入运行一下</p><p><img src="/img/4.png" data-original="http://nofreesytle.top/sql.png" alt="运行sql"></p><p>表项生成会稍微有点慢，大概俩三分钟才能刷新看到，可以稍微等等，然后右键点击waline数据库，选择刷新就能看到表项了</p><p><img src="/img/4.png" data-original="http://nofreesytle.top/bianxiang.png" alt="表项"></p><p>最难的部分数据库我们就已经搞定了，剩下俩步，一个比一个简单。</p><h2 id="2-部署waline"><a href="#2-部署waline" class="headerlink" title="2.部署waline"></a>2.部署waline</h2><p>在阿里云ECS上面配置如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/walinejs/waline.git</span><br><span class="line">cd waline</span><br><span class="line">docker build -t lizheming/waline -f packages/server/Dockerfile .</span><br></pre></td></tr></table></figure><p>docker build -t lizheming&#x2F;waline -f packages&#x2F;server&#x2F;Dockerfile .这个docker配置需要下载不少文件和资源，大概几十兆吧，等个几分钟构建完成以后，然后继续配置docker-waline，如果配置是按照教程来的，直接完整复制该命令，然后回车运行即可，如果配置有调整，请按照配置解释说明进行修改调整。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name waline -p 8360:8360 \</span><br><span class="line">  -v /mydocker/waline/data:/app/data \</span><br><span class="line">  -e TZ=&quot;Asia/Shanghai&quot; \</span><br><span class="line">  -e MYSQL_HOST=&quot;172.17.0.2&quot; \</span><br><span class="line">  -e MYSQL_DB=&quot;waline&quot; \</span><br><span class="line">  -e MYSQL_USER=&quot;root&quot; \</span><br><span class="line">  -e MYSQL_PASSWORD=&quot;123456&quot; \</span><br><span class="line">  --restart always \</span><br><span class="line">  lizheming/waline</span><br></pre></td></tr></table></figure><p>配置解释</p><p>docker run -d –name waline -p 8360:8360 \   ———本次docker配置的端口信息，容器名称waline<br>  -v &#x2F;mydocker&#x2F;waline&#x2F;data:&#x2F;app&#x2F;data <br>  -e TZ&#x3D;”Asia&#x2F;Shanghai” <br>  -e MYSQL_HOST&#x3D;”172.17.0.2” \    ———这个是docker-mysql的环回地址，如果没有配docker-mysql就是127.0.0.1<br>  -e MYSQL_DB&#x3D;”waline” \         ———这个就是我们新建的mysql数据库waline名称<br>  -e MYSQL_USER&#x3D;”root” \        ———-这个是我们定义的mysql数据用户<br>  -e MYSQL_PASSWORD&#x3D;”123456” \   ———-这个是我们定义的mysql数据用户密码<br>  –restart always <br>  lizheming&#x2F;waline</p><p>这个配置完成，查看一下，能看到俩个docker信息，一个mysql一个waline，这就说明配置的没有问题，都已经生效了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@root ~]# docker ps -a </span><br><span class="line">CONTAINER ID   IMAGE              COMMAND                  CREATED        STATUS        PORTS                                         NAMES</span><br><span class="line">0269bddd5191   lizheming/waline   &quot;docker-entrypoint.s…&quot;   21 hours ago   Up 21 hours   0.0.0.0:8360-&gt;8360/tcp                        waline</span><br><span class="line">608effc0382b   mysql:5.7          &quot;docker-entrypoint.s…&quot;   29 hours ago   Up 22 hours   3306/tcp, 33060/tcp, 0.0.0.0:4306-&gt;4306/tcp   mysql</span><br></pre></td></tr></table></figure><p>部署waline的最后一步了，通过浏览器访问<code>http://ECS公网IP地址:8360/ui/register</code>，便能看到注册界面，注册的第一个用户会成为后台管理员，注册的时候，记住自己的账号和密码，下次登录别忘了。</p><h2 id="3-修改访问地址"><a href="#3-修改访问地址" class="headerlink" title="3.修改访问地址"></a>3.修改访问地址</h2><p>现在是修改博客配置文件就可以，我用的博客是hexo采用的butterfly主题，我的配置文件就是_config.butterfly.yml文件下面配置如下配置即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">waline:</span><br><span class="line">  serverURL: http://ECS公网IP地址:8360/ # 填写自己刚刚在访问的IP和端口即可</span><br><span class="line">  bg: # waline background</span><br><span class="line">  pageview: false</span><br><span class="line">  option:</span><br><span class="line">    requiredMeta: [ nick ] # 选定昵称和评论为必填项，可以选择加上mail，这样就必填邮箱信息了</span><br><span class="line">    locale:</span><br><span class="line">      placeholder: 有想要更新的文章或者建议欢迎评论留言！ # 内容区提示</span><br><span class="line">      sofa: &#x27;评论区空空如也~呜呜呜&#x27;</span><br><span class="line">      anonymous: &#x27;匿名的野猫&#x27;</span><br><span class="line">      login: &#x27;登录(可选)&#x27;</span><br></pre></td></tr></table></figure><p>然后重新hexo clean&amp;&amp;hexo g&amp;&amp;hexo s你就可以看到新配置的评论系统了，直接评论一下就能显示出来，并且数据库里面能看到新增的评论信息。</p><p>效果大概这样</p><p><img src="/img/4.png" data-original="http://nofreesytle.top/comment.png" alt="评论"></p>]]></content>
      
      
      <categories>
          
          <category> 阿里云 </category>
          
          <category> 评论系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
            <tag> waline </tag>
            
            <tag> 评论系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IS-IS报文详解及邻居建立交互说明（一）</title>
      <link href="/posts/9c8710c7.html"/>
      <url>/posts/9c8710c7.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是IS-IS协议"><a href="#什么是IS-IS协议" class="headerlink" title="什么是IS-IS协议"></a>什么是IS-IS协议</h1><p>IS-IS英文全称是Intermediate System to Intermediate System，就是中间系统到中间系统，简单理解就是设备与设备的通信协议，这个协议最初是国际标准化组织ISO（the International Organization for Standardization）设计的一种动态路由协议。IS-IS协议和OSPF协议类似，也是采用最短路径优先SPF（Shortest Path First）算法进行路由计算，这算法后续的文章我会详细给大家解释是如何计算的，他的优点在于收敛速度快，拓展性强，运行在数据链路层，可以实现大规模网络的互通。</p>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
          <category> isis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> isis </tag>
            
            <tag> 网络协议 </tag>
            
            <tag> igp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章聊聊我的个人博客计划</title>
      <link href="/posts/89a15a56.html"/>
      <url>/posts/89a15a56.html</url>
      
        <content type="html"><![CDATA[<h1 id="我的第一篇博客文章聊聊我的个人博客计划"><a href="#我的第一篇博客文章聊聊我的个人博客计划" class="headerlink" title="我的第一篇博客文章聊聊我的个人博客计划"></a>我的第一篇博客文章聊聊我的个人博客计划</h1><p>欢迎大家来到我的个人博客，这是我利用hexo开源项目搭建的静态博客，hexo是当下简单好用的开源博客，它是基于nodejs生成的，几乎不怎么需要部署就能搭建，所以即使没有任何编程经验也能组建个人博客，当然本篇文章暂时不会深入讨论hexo，我主要聊一下自己博客计划，但是有感兴趣怎么搭建的小伙伴，我后面可以出一个特别详细的教程。不过在此之前，我们先进入今天正题，我会从三个方面介绍，我为什么要搭建个人博客，准备在博客上更新那些内容，如何实现自己的目标。</p><h2 id="我为什么要搭建个人博客"><a href="#我为什么要搭建个人博客" class="headerlink" title="我为什么要搭建个人博客"></a>我为什么要搭建个人博客</h2><p>首先作为一个技术宅，搭建个人博客在我眼中是一个比较酷的事情，并且我以前购买的阿里云ECS服务器没有过期，然后我想把自己闲置的云服务器资源利用上，所以选择自己搭建一个独立博客对自己也算是挺顺理成章的事情吧。至于为什么是现在才想起来搭建自己的个人博客，其实严格来说这不是我第一次搭建自己的个人博客，几年前我就利用hexo工具在github的免费服务器上做过个人博客，不过后面域名到期，并且长期没有更新文章就没有弄了。</p><p>至于近期的起因是在知乎上刷到一个话题“独立开发者靠什么赚钱”，我觉得搭建一个独立博客，利用业余时间不仅可以积累技术分享技术，还可以一定程度上打造个人品牌（虽然很难，独立博客很多，像脱颖而出并不容易，需要有内容和坚持），所以我准备利用三到五年时间去运营一下我的博客，如果可以的话，不排除在多平台上同步发布文章，比如微信，知乎简书等，这样不同平台之间可以相互导流，小小的增加自己的浏览量。</p><h2 id="准备在博客上更新那些内容"><a href="#准备在博客上更新那些内容" class="headerlink" title="准备在博客上更新那些内容"></a>准备在博客上更新那些内容</h2><p>作为程序员个人的博客计划，主要还是分享技术类文章为主其他杂谈为辅，准备分为三个模块去更新内容。</p><p>第一个模块就是更新自己这些年做过的一些项目经验和技术总结，同时在业务时间去了解和尝试不同的开源项目，做一些简单开源项目教程和热点技术的跟进和解读。</p><p>第二模块准备每周分享转载五篇自己觉得不错的文章，并且每篇文章分享一到二百字的感悟和评价，分享的文章应该大概率是技术热点或者自己行业相关的文章，另外不排除分享一些非技术类文章点评。</p><p>第三个部分就是分享自己除了技术上面的其他杂谈，可能会包含一些个人价值观的输出，一些观点的输出，也可能分享一些个人计划，生活感想啥的，总之这个部分就偏个人一些，琴棋书画样样都可以分享。</p><p>推荐自己的个人博客，其实不仅仅是在推销自己的技术，在一定程度上是推销自己这个人，个人的小目标是希望经过三五年的文章分享，自己的个人博客浏览量能稳定到五千左右，我觉得能达到这个目标就已经还不错了，毕竟谁现在还看博客，而且还是跑到不知名小程序员这里来看文章。所以为了达到这目标，我需要多看多想多写，这不也是变相提升自己嘛，一举多得的好事。</p><h2 id="如何实现自己的目标"><a href="#如何实现自己的目标" class="headerlink" title="如何实现自己的目标"></a>如何实现自己的目标</h2><p>首先声明，自己其实是一个相对比较懒散的人，好多事情都是半途而废，虽然今天2023年五月八号在这里写了很多计划和目标，但是我也不一定完全能做到，不过制定计划并且开始行动，总是比一直一动不动好一些，走一步也有进步一步的好处是吧。</p><p>目前文章更新的计划如何保证，我大概的思路是这样的，我从学校毕业到现在也差不大七年左右时间了，期间做过俩年半的java相关的后台开发，后面转行来到了IT行业，又做了大概四年半的C语言开发，主要是做路由协议相关的开发。所以这些年还是有一些技术积累的，每周更新一篇技术总结应该能做到，毕竟路由协议RFC文档也一直有更新，我们路由协议功能也不断更新。</p><p>分享转载的五篇文章我会利用平常的时间去阅读和记录，最后在统一在周末一起总结分享出来，尽量保证每周一更，文章来源的渠道我打算从开源中国，掘金，开发者头条，github等等地方去找好的文章帮大家优之选优，筛选好的内容分享，同时如果有好的英文文章我也可以在有时间和精力的情况下，翻译转载到国内，这样也可以提高英语能力，也能更好帮助其他开发者。</p><p>杂谈的部分的话，这个更新就不固定了，不过也会尽量保持每周一更，这样算下来，目前计划每周大概更新三篇以上文章吧。</p><p>说完更新计划，那么我的浏览量目标计划，我是这样打算的，首先我会尽量保证各个平台上分享我的文章，用互联网黑话讲，打造个人品牌矩阵，形成流量导流，哈哈哈哈。其次，我会在文章质量上做一定保证，在内容上做到科普性和专业性兼顾，坚决抵制做烂尾的技术分享，要分享就给它都捋顺了给大家讲明白才行。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>好了，罗里吧嗦的说了一堆，这第一篇文章就写到这里了，以后大概率不会更新了，但是计划我会根据实际情况把握的，如果有想联系我的朋友，github关注一下我，<a href="https://github.com/hioleair">hioleair (zhangxuanming) (github.com)</a>，谢谢，最后希望国泰民安，人民无灾无难，所以有人幸福安康，开心快乐。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
